// Copyright 2019 Google, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package structeditor

import (
	"net/http"
	"net/url"
)

type Editor interface {
	// Render the HTML for the editor UI
	Render() (string, error)
	// Run the specified operator on the data
	// referenced by the path.
	Mutate(path string, operator Operator) error
	// Create an operator described by the query params
	// in a URL
	OperatorFor(values url.Values) (Operator, error)
	// HTTP request handler to render the viewer.
	ViewHandler(w http.ResponseWriter, r *http.Request)
	// HTTP request handler to render mutation requests generated by the
	// viewer
	MutateHandler(w http.ResponseWriter, r *http.Request)
}

type editor struct {
	state     interface{}
	mutateUrl string
}

// NewEditor creates a new editor instance wrapping the specified state.  If
// state is a pointer, it can be mutated; if not a pointer, it can be viewed but
// the UI will not offer mutation tools. The mutatePath parameter provides
// the path to which requests to change the state are sent.
func NewEditor(state interface{}, mutatePath string) Editor {
	return &editor{
		state:     state,
		mutateUrl: mutatePath,
	}
}

// ServeEditor creates a new editor for the specified state and configures it to
// be served at the specified URL (and a "url/mutate" path for edits to the
// state). The specified serveMux will have paths added to it. As with NewEditor,
// if state is a pointer, it can be mutated; if not, mutation tools are not
// shown in the UI.
//
// WARNING: The URLs served by this service expose internal workings of your
// server and requests are not authenticated / authorized. See "Security Notice"
// in README.md for details. If you need authentication / authorization, you
// should wrap the ViewHandler and MutateHandler in the Editor interface in
// your own auth validation and serve your own endpoints.
func ServeEditor(state interface{}, path string, serveMux *http.ServeMux) {
	mutationPath := path + "/mutate"
	if mutationPath == "//mutate" {
		mutationPath = "/mutate"
	}
	editor := NewEditor(state, mutationPath)
	serveMux.HandleFunc(path, editor.ViewHandler)
	serveMux.HandleFunc(mutationPath, editor.MutateHandler)
}
